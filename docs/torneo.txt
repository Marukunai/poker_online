Lo que falta:

Crear rondas (fase = 1, 2, final...).

Agrupar participantes en TorneoMesa din√°micamente cuando comienza el torneo.

Cuando en una mesa queda un solo jugador, avanza autom√°ticamente de ronda.

Finalizar torneo cuando solo quede un participante.

2. Inicio autom√°tico del torneo en base a fecha/hora
A√±adir una tarea programada (@Scheduled) o lanzar el torneo desde el backend cuando fechaInicio <= now.

Cambiar estado de PENDIENTE ‚Üí EN_CURSO ‚Üí FINALIZADO.

3. Estructura de premios
Calcular premioTotal en base al buyIn * participantes.

Crear una tabla de premios: ej. 1.¬∫ 50%, 2.¬∫ 30%, 3.¬∫ 20%.

Asignar premios a los usuarios al finalizar el torneo (ajustar fichas globales del User).

4. Modo eliminaci√≥n directa vs ranking
Si eliminacionDirecta == true, se eliminan jugadores al quedarse sin fichas.

Si false, se otorgan puntos por posici√≥n o rendimiento (ranking acumulativo).

5. Visualizaci√≥n del torneo (opcional)
Crear endpoint tipo /torneos/{id}/estado para ver:

Participantes a√∫n activos

Mesas activas

Ronda actual

Tiempo restante (si se usa reloj)

Premio en juego

üß† Ideas avanzadas (para cuando est√© todo lo anterior):
Gesti√≥n de relojes de ciegas (ciegas que suben por nivel de ronda).

Torneos multimesa reales, donde los ganadores de cada mesa se mezclan.

Soporte para torneos programados por el administrador (panel de gesti√≥n).

Integraci√≥n con notificaciones 

---------- LO MAS IMPORTANTE ------------

Crear l√≥gica para iniciar un torneo autom√°ticamente si la fecha se cumple.

 Crear l√≥gica de emparejamiento a mesas por ronda.

 Gestionar finalizaci√≥n autom√°tica (quedar 1 jugador).

 Asignar premios al finalizar.

 Agregar endpoint para ver estado del torneo.